name: Deploy – Pull on Server

on:
  # Desencadena cuando haya un push a main (o manualmente)
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run_pull:
    name: Pull desde el server
    runs-on: ubuntu-latest

    # Variables que viajan desde Secrets
    env:
      SSH_USER:    ${{ secrets.SSH_USER }}
      SSH_HOST:    ${{ secrets.SSH_HOST }}
      SSH_PORT:    ${{ secrets.SSH_PORT }}
      WORK_DIR:    ${{ secrets.WORK_DIR }}     # /ruta/en/tu/vps
      MAIN_BRANCH: ${{ secrets.MAIN_BRANCH }}  # normalmente "main"

    steps:
    # 1) Clona el repo en el runner (obligatorio para GH Actions)
    - name: Checkout repo
      uses: actions/checkout@v3

    # 2) Arranca ssh-agent y carga la clave (usa ED25519)
    - name: Start ssh-agent & add key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # 3) DEBUG – muestra huellas y primera clave pública
    - name: 🔍 Debug | Show keys in agent
      run: |
        echo ">> Fingerprints en ssh-agent"
        ssh-add -l
        echo
        echo ">> Primera clave pública:"
        ssh-add -L | head -n 1
        echo
        echo ">> Fingerprint de esa pública:"
        ssh-add -L | head -n 1 | ssh-keygen -lf -
      continue-on-error: true

    # 4) Añade la host key del VPS para evitar StrictHostKeyChecking
    - name: Add VPS to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts

    # 5) DEBUG – prueba conexión con -vvv (no falla si algo sale mal)
    - name: 🔍 Debug | Test SSH connection (-vvv)
      run: |
        ssh -vvv -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" exit
      continue-on-error: true

    # 6) Ejecuta git pull en el servidor
    - name: Remote git pull
      run: |
        echo "==> Conectando y ejecutando git pull en VPS..."
        ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
          "set -euo pipefail && \
           echo '📂 Dir de trabajo: $WORK_DIR' && \
           cd '$WORK_DIR' && \
           echo '🔄 git fetch --all --prune' && git fetch --all --prune && \
           echo '📌 git checkout $MAIN_BRANCH' && git checkout '$MAIN_BRANCH' && \
           echo '⬇️  git pull origin $MAIN_BRANCH' && git pull --ff-only origin '$MAIN_BRANCH' && \
           echo '✅ Pull completado'"

    # 7) Limpieza opcional
    - name: Cleanup known_hosts
      if: always()
      run: rm -f ~/.ssh/known_hosts
